apiVersion: v1
kind: ConfigMap
metadata:
  name: local-manager-cm
  namespace: {{ .Values.namespace }}
data:
   logger_name: " Local Manager  " # Name as per need
   log_level:  "DEBUG"
   api_port: "3500" # port for API svc
   msg_broker_user: "fbk_user" # leave empty for amqp without authentication
   msg_broker_password: "@mqpt1m" # leave empty for amqp without authentication
   response_router_post_address: "http://response-router-service:3000/api/item/from_local_mgr_api/21"
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: {{ .Release.Name }}
  name: {{ .Release.Name }}
  namespace: {{ .Values.namespace }}
spec:
  containers:
  - image: {{ .Values.image.repository}}:{{ .Values.image.tag}}
    name: {{ .Chart.Name }}
    env:
      - name: RESPONSE_ROUTER_POST_ADDRESS
        valueFrom:
          configMapKeyRef:
            name: local-manager-cm
            key: response_router_post_address
      - name: API_PORT
        valueFrom:
          configMapKeyRef:
            name: local-manager-cm
            key: api_port
      - name: LOG_LEVEL
        valueFrom:
          configMapKeyRef:
            name: local-manager-cm
            key: log_level
      - name: LOGGER_NAME
        valueFrom:
          configMapKeyRef:
            name: local-manager-cm
            key: logger_name
      - name: MSG_BROKER_USER
        valueFrom:
          configMapKeyRef:
            name: local-manager-cm
            key: msg_broker_user
      - name: MSG_BROKER_PASSWORD
        valueFrom:
          configMapKeyRef:
            name: local-manager-cm
            key: msg_broker_password
    resources: {}
    imagePullPolicy: {{ .Values.image.pullPolicy}}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: {{ .Chart.Name }}
  name: {{ .Chart.Name }}-service
  namespace: {{ .Values.namespace }}
spec:
  ports:
  - port: {{ .Values.service.port}}
    protocol: {{ .Values.service.protocol}}
    targetPort: {{ .Values.service.port}}
  selector:
    run: {{ .Chart.Name }}
  type: {{ .Values.service.type}}
status:
  loadBalancer: {}
